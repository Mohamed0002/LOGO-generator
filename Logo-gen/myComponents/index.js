const getBaseURL = () => {
	return new URL('.', import.meta.url);
};

class MyLogo extends HTMLElement {
    style = `
    @import url('https://fonts.googleapis.com/css2?family=Grey+Qo&display=swap');

    #logo {
      border:2px solid #222;
      height: 150px;
    }
    .focus-in-expand {
        -webkit-animation: focus-in-expand 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
                animation: focus-in-expand 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
    }
    .focus-in-expand-fwd {
        -webkit-animation: focus-in-expand-fwd 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
                animation: focus-in-expand-fwd 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
    }
    .tracking-in-expand {
        -webkit-animation: tracking-in-expand 0.7s cubic-bezier(0.215, 0.610, 0.355, 1.000) both;
                animation: tracking-in-expand 0.7s cubic-bezier(0.215, 0.610, 0.355, 1.000) both;
    }
    /* ----------------------------------------------
 * Generated by Animista on 2021-9-13 11:7:37
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

/**
 * ----------------------------------------
 * animation focus-in-expand
 * ----------------------------------------
 */
@-webkit-keyframes focus-in-expand {
  0% {
    letter-spacing: -0.5em;
    -webkit-filter: blur(12px);
            filter: blur(12px);
    opacity: 0;
  }
  100% {
    -webkit-filter: blur(0px);
            filter: blur(0px);
    opacity: 1;
  }
}
@keyframes focus-in-expand {
  0% {
    letter-spacing: -0.5em;
    -webkit-filter: blur(12px);
            filter: blur(12px);
    opacity: 0;
  }
  100% {
    -webkit-filter: blur(0px);
            filter: blur(0px);
    opacity: 1;
  }
}
    #logo {
        color:red;
        font-size: 40px;
        border:5px solid green;
    }

    /* ----------------------------------------------
 * Generated by Animista on 2021-9-20 9:19:32
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

/**
 * ----------------------------------------
 * animation focus-in-expand-fwd
 * ----------------------------------------
 */
@-webkit-keyframes focus-in-expand-fwd {
  0% {
    letter-spacing: -0.5em;
    -webkit-transform: translateZ(-800px);
            transform: translateZ(-800px);
    -webkit-filter: blur(12px);
            filter: blur(12px);
    opacity: 0;
  }
  100% {
    -webkit-transform: translateZ(0);
            transform: translateZ(0);
    -webkit-filter: blur(0);
            filter: blur(0);
    opacity: 1;
  }
}
@keyframes focus-in-expand-fwd {
  0% {
    letter-spacing: -0.5em;
    -webkit-transform: translateZ(-800px);
            transform: translateZ(-800px);
    -webkit-filter: blur(12px);
            filter: blur(12px);
    opacity: 0;
  }
  100% {
    -webkit-transform: translateZ(0);
            transform: translateZ(0);
    -webkit-filter: blur(0);
            filter: blur(0);
    opacity: 1;
  }
}

/* ----------------------------------------------
 * Generated by Animista on 2021-9-20 9:22:2
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

/**
 * ----------------------------------------
 * animation tracking-in-expand
 * ----------------------------------------
 */
@-webkit-keyframes tracking-in-expand {
  0% {
    letter-spacing: -0.5em;
    opacity: 0;
  }
  40% {
    opacity: 0.6;
  }
  100% {
    opacity: 1;
  }
}
@keyframes tracking-in-expand {
  0% {
    letter-spacing: -0.5em;
    opacity: 0;
  }
  40% {
    opacity: 0.6;
  }
  100% {
    opacity: 1;
  }
}


.clearfix:after{
  content: ".";
  display: block;
  clear: both;
  visibility: hidden;
  line-height: 0;
  height: 0;
 }
.clearfix {display: block;}
html[xmlns] .clearfix {display: block;}
* html .clearfix {height: 1%;}

html{box-sizing: border-box}
*, *:after,*:before {box-sizing: inherit}


.inscription{
width: 60%;
margin: 0 auto;
background: #EF5350;
text-align: center;
border-radius: 10px;
margin-top : 20px;
}
form{
float:left;
}
h2{
font-family: tahoma;
color : #fff;
padding: 10px;
text-align = center;
}

input{
margin: 5px 20px;
width: 250px;
color: #EF5350;
}

.test{
  font-family: tahoma;
  color : #fff;
  padding: 10px;
  }

  .boxIncon{
    position:absolute;
    top:50%;
    left:50%;
      transform: translate(-50%, -50%);
      width: 100%;
      text-align: center;
  }

  i.fa{
    font-size:200px;
  }
  


    `;
    html = `  
    <center>
    <div id="logo" align="center"  >mon logo 2
      </span>
    </div>
   </center>

<div class="inscription clearfix">

<form action="">
  <h2 align="right">GENERATOR DE LOGO  </h2>

  Texte : <input id="logo-text"  type="text" value="" /> 
  <br>
  <br class = "test">
 Couleur : <input type="color" id="selecteurCouleur"> 
  <br>

  Background color : <input type="color" id="backgroundCouleur"> 
 
  <br>
  Couleur du bord : <input type="color" id="bordCouleur">
  <br>
  <div>
  <label for="select">Choose a background image:</label>

        <select id="imagefond">
          <option value="">Select</option>
          <option value="Flammes">Flammes</option>
          <option value="Rose">Rose</option>
          <option value="water">Water</option>
          <option value="nuit">Nuit</option>

</select>
<br>
<label for="select">Choose a font:</label>
<select id="font">
<option value="">Select</option>
<option value="Times New Roman">Times New Roman</option>
<option value="Lucida Console">Lucida Console</option>
<option value="Courier New">Courier New</option>
<option value="Comic Sans MS">Comic Sans MS</option>

</select>
<br>
Taille : <input type="range" val=40 min=5 max=100 
id="selecteurTaille"> 100
</br>

</form>

</div>

    
                          
    `;

    constructor() {
        super();
        // On crée le "shadow DOM"
        this.attachShadow({ mode: "open" });

        // récupérer les propriétés/attributs HTML
        this.couleur = this.getAttribute("couleur");
        if(!this.couleur) this.couleur = "black";

        console.log("couleur récupérée = " + this.couleur);

        this.text = this.getAttribute("text");
        this.animationClass = this.getAttribute("animation");
        this.controls = this.getAttribute("controls");
        this.size = this.getAttribute("size");
        this.oldanimation = ""

    }

    connectedCallback() {
        // ici on instancie l'interface graphique etc.
        this.shadowRoot.innerHTML = `<style>${this.style}</style>`
            + this.html;

        this.logo = this.shadowRoot.querySelector("#logo");
        // affecter les valeurs des attributs à la création
        this.logo.style.color = this.couleur;
        this.logo.classList.add(this.animationClass);
        this.declareEcouteurs();

        // On modifie les URLs relatifs
        this.fixRelativeURLs();
    }

    fixRelativeURLs() {
        let images = this.shadowRoot.querySelectorAll('img');
        images.forEach((e) => {
          console.log("dans le foreach")
          let imagePath = e.getAttribute('src');
            e.src = getBaseURL() + '/' + imagePath;
        });
    
      }

    declareEcouteurs() {
        this.shadowRoot.querySelector("#selecteurCouleur")
            .addEventListener("input", (event) => {
                this.changeCouleur(event.target.value);
            });

        this.shadowRoot.querySelector("#selecteurTaille")
            .addEventListener("input", (event) => {
                this.changeSize(event.target.value);
            });
    
            this.shadowRoot.querySelector("#bordCouleur")
            .addEventListener("input", (event) => {
                this.changeCouleurBord(event.target.value);
            });

            this.shadowRoot.querySelector("#logo-text")
            .addEventListener("input", (event) => {
              this.logo.innerHTML = event.target.value
          })

            this.shadowRoot.querySelector("#backgroundCouleur")
            .addEventListener("input", (event) => {
                this.changeBackgroundCouleur(event.target.value);
            });

            this.shadowRoot.querySelector("#imagefond")
            .addEventListener("input", (event) =>{
              this.imagefond(event);
            });

            this.shadowRoot.querySelector("#font")
            .addEventListener("input", (event) =>{
              this.font(event);
            });

            


    
            
    
    }

    // Fonction
    changeCouleur(val) {
        this.logo.style.color = val;
    }

    changeSize(val) {
        this.logo.style.fontSize = val + "px";
    }
    changeBackgroundCouleur(val){
      this.logo.style.backgroundColor = val;
    }

    changeCouleurBord(val) {
      this.logo.style.borderColor = val;
  }

  imagefond(event) {
    if(event.target.value == "Flammes"){
      this.logo.style.background = "url(" + getBaseURL() + "images/flammes.jpg)";
      }
      
if(event.target.value == "Rose"){
  this.logo.style.background = "url(" + getBaseURL() + "images/rose.jpg)";

}
if(event.target.value == "water"){
  this.logo.style.background = "url(" + getBaseURL() + "images/water.jpg)";}


  if(event.target.value == "nuit"){
    this.logo.style.background = "url(" + getBaseURL() + "images/nuit.jpg)";

  }
}

font(event){

  if(event.target.value == "Times New Roman"){
    this.logo.style.fontFamily = "Times New Roman", Times, serif;
  }
  if(event.target.value =="Lucida Console"){
    this.logo.style.fontFamily = "Lucida Console", "Courier New", monospace;;
  }
  if(event.target.value =="Comic Sans MS"){
    this.logo.style.fontFamily = "Comic Sans MS", cursive, sans-serif;
  }
  if(event.target.value =="Courier New"){
    this.logo.style.fontFamily = "Courier New", Courier, monospace;
  }
}

}



customElements.define("my-logo", MyLogo);
